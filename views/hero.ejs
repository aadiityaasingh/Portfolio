<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <link rel="stylesheet" href="hero.css" />
  </head>
  <body>
    <canvas id="particles"></canvas>
    <section class="hero">
      <div class="hero-content">
        <div class="hero-text">
          <h1>Hi, I'm <span>Aditya Singh</span></h1>
          <h2><span class="typing-text"></span></h2>
          <p>
            Passionate about building innovative web apps and exploring AI/ML.
            Let's create something amazing together!
          </p>

          <div class="hero-buttons">
          <form action="/resume" method="get" target="_blank">
            <a href="/resume" target="_blank" download>
              <button class="btn btn-outline" >Download CV</button>
            </a>
            
          </form>
          </div>

          <div class="social-icons">
            <a href="https://github.com/aadiityaasingh" target="_blank"
              >üê± GitHub</a
            >
            <a href="https://www.linkedin.com/in/aditya-singh-245226231/" target="_blank"
              >üíº LinkedIn</a
            >
            <a href="https://www.instagram.com/aadiityaasingh" target="_blank">üì∑ Instagram</a>


          </div>
        </div>

        <div class="hero-image">
          <img src="/images/prof.jpg" alt="Aditya Singh" />
        </div>
      </div>

      <!-- Scroll Down Indicator -->
      <div class="scroll-down">‚¨áÔ∏è</div>
    </section>
    <script>
  const roles = ["MERN Stack Developer", "AI & ML Enthusiast", "Web3 Explorer"];
  let i = 0;
  let j = 0; 
  let isDeleting = false;
  const typingElement = document.querySelector(".typing-text");

  function typeEffect() {
    const currentRole = roles[i];

    if (!isDeleting) {
      typingElement.textContent = currentRole.substring(0, j++);
    } else {
      typingElement.textContent = currentRole.substring(0, j--);
    }

    let typingSpeed = isDeleting ? 150 : 250; // Slower typing, slightly faster delete

    if (!isDeleting && j === currentRole.length) {
      isDeleting = true;
      typingSpeed = 1000; // Pause before deleting
    } else if (isDeleting && j === 0) {
      isDeleting = false;
      i = (i + 1) % roles.length; // Move to next role
      typingSpeed = 200; // Pause before typing next role
    }

    setTimeout(typeEffect, typingSpeed);
  }

  typeEffect();

const canvas = document.getElementById('particles');
const ctx = canvas.getContext('2d');

canvas.width = window.innerWidth;
canvas.height = window.innerHeight;

const particlesArray = [];
const numberOfParticles = 100;

class Particle {
  constructor() {
    this.x = Math.random() * canvas.width;
    this.y = Math.random() * canvas.height;
    this.size = Math.random() * 3;
    this.speedX = Math.random() * 0.5 - 0.25;
    this.speedY = Math.random() * 0.5 - 0.25;
  }

  update() {
    this.x += this.speedX;
    this.y += this.speedY;
    if (this.x < 0 || this.x > canvas.width) this.speedX *= -1;
    if (this.y < 0 || this.y > canvas.height) this.speedY *= -1;
  }

  draw() {
    ctx.fillStyle = 'white';
    ctx.beginPath();
    ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
    ctx.fill();
  }
}

function init() {
  for (let i = 0; i < numberOfParticles; i++) {
    particlesArray.push(new Particle());
  }
}

function animate() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  particlesArray.forEach(p => {
    p.update();
    p.draw();
  });
  requestAnimationFrame(animate);
}

init();
animate();

</script>

  </body>
</html>
